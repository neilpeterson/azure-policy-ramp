trigger:
  branches:
    include:
    - main
  paths:
    include:
      - azure-pipelines-nepeters.yml

stages:
  - stage: Build
    dependsOn: []

    jobs:
      - job: ConfigPackaging
        displayName: Configuration Package Creation
        pool: 
          vmImage: windows-2022
          
        variables:
          Parameters.outputStorageUri: ''
          Parameters.outputStorageToken: ''

        steps:
          - task: PowerShell@2
            displayName: Setting Modules and Compiling
            inputs:
              pwsh: true
              targetType: 'inline'
              script: |
                find-module PSDesiredStateConfiguration | install-module -Force
                find-module PSDSCResources | install-module -Force
                find-module GuestConfiguration | install-module -Force
                find-module SChannelDsc | install-module -Force
                
                .\tls-config\tls.ps1

                New-GuestConfigurationPackage -Name 'tlssecure' -Configuration './tlssecure/localhost.mof' -Type AuditAndSet -Force
          
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: .\tlssecure.zip
              artifactName: tlssecure

  - stage: DeployTest
    dependsOn: Build
    jobs:
      - job: PolicyCreation
        displayName: Azure Policy Implementation
        pool: 
          vmImage: windows-2022
        
        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            artifactName: 'tlssecure'
            targetPath: '.\'

        - task: AzureFileCopy@3
          inputs:
            SourcePath: '.\tlssecure.zip'
            azureSubscription: 'nepeters-arm-connection'
            Destination: 'AzureBlob'
            storage: 'azurepolicycdef'
            ContainerName: 'guestconfiguration'
            outputStorageUri: Parameters.outputStorageUri
            outputStorageContainerSasToken: Parameters.outputStorageToken
            sasTokenTimeOutInMinutes: '525600'        
        
        - task: PowerShell@2
          displayName: Creating Policy
          inputs:
            pwsh: true
            targetType: 'inline'
            script: |
              find-module PSDesiredStateConfiguration | install-module -Force
              find-module PSDSCResources | install-module -Force
              find-module GuestConfiguration | install-module -Force
              find-module SChannelDsc | install-module -Force
                
              $ContentURI = "$(Parameters.outputStorageUri)tlssecure.zip$(Parameters.outputStorageToken)"
                
              New-GuestConfigurationPolicy -PolicyId (New-Guid).Guid -ContentUri $ContentURI -DisplayName 'tlssecure' -Path './policies' -Platform 'Windows' -Description 'tlssecure' -PolicyVersion 1.0.0 -Mode ApplyAndAutoCorrect -Verbose

              $RawPolicy = Get-Content .\policies\tlssecure_DeployIfNotExists.json -raw
              $PolicyObj = ConvertFrom-Json $RawPolicy

              $PolicyObj.properties.policyRule.then.details.deployment.properties.parameters.assignmentName.value = "tlssecure"
              $PolicyObj.properties.policyRule.then.details.name = "tlssecure"
              $Out = ConvertTo-Json -InputObject $PolicyObj -depth 32
              Set-Content -Path .\policies\tlssecure_DeployIfNotExists.json -Value $Out
          
        - task: AzurePowerShell@5
          displayName: Create Assignment and Remediation
          inputs:
            azureSubscription: 'nepeters-arm-connection'
            ScriptType: 'InlineScript'
            azurePowerShellVersion: 'LatestVersion'
            Inline: |
            
              $Policy = New-AzPolicyDefinition -Name 'tlssecure' -Policy .\policies\tlssecure_DeployIfNotExists.json

        #       $policyDef = Get-AzPolicyDefinition -Id $Policy.PolicyDefinitionId
        #       $resourceGroup = Get-AzResourceGroup -Name 'test-001'
        #       $resourceGroup.ResourceId
              # $assignment = New-AzPolicyAssignment -Name 'tlssecure' -DisplayName 'tlssecure' -Scope $resourceGroup.ResourceId -PolicyDefinition $policyDef -Location 'centralus' -IdentityType "SystemAssigned"

              # # Use the $policyDef to get to the roleDefinitionIds array
              # $roleDefinitionIds = $policyDef.Properties.policyRule.then.details.roleDefinitionIds

              # if ($roleDefinitionIds.Count -gt 0)
              # {
              #     $roleDefinitionIds | ForEach-Object {
              #         $roleDefId = $_.Split("/") | Select-Object -Last 1
              #         New-AzRoleAssignment -Scope $resourceGroup.ResourceId -ObjectId $assignment.Identity.PrincipalId -RoleDefinitionId $roleDefId
              #     }
              # }

              # Start-Sleep -Seconds 300

              # Start-AzPolicyRemediation -Name 'myRemedation' -PolicyAssignmentId $assignment.PolicyAssignmentId -ResourceGroupName test-001